---
AWSTemplateFormatVersion: "2010-09-09"
Conditions:
  ArtifactsBucketCondition:
    Fn::Equals:
      - Ref: CreateArtifactsBucketParameter
      - "True"

Description: Create user AWS resources
Parameters:
  StackPrefixParameter:
    Description: Stack Prefix for Forward Proxy stack
    Type: String
  VPCIdParameter:
    Description: VPC ID
    Type: String
  CreateArtifactsBucketParameter:
    Description: Toggle creating an S3 Bucket for storing dev team's artifacts (true/false)
    Type: String
  ArtifactsBucketNameParameter:
    Type: String
    Description: Name of the S3 Bucket where the artifacts are to be stored
  Route53PublicHostedZoneNameParameter:
    Description: Route53 Public Hosted Zone Name the public Record Set will be created in
    Type: String
  Route53PrivateHostedZoneNameParameter:
    Description: Route53 Private Hosted Zone Name the private Record Set will be created in
    Type: String
  CorpNetworkCidrParameter:
    Description: IPv4 CIDR of corp network
    Type: String

Resources:

  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Condition: ArtifactsBucketCondition
    Properties:
      BucketName:
        Ref: ArtifactsBucketNameParameter
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CorpNetworkSecurityGroup:
    Properties:
      GroupDescription: Corp Network Security Group
      Tags:
        - Key: Name
          Value: Corp Network Security Group
        - Key: StackPrefix
          Value:
            Ref: StackPrefixParameter
      VpcId:
        Ref: VPCIdParameter
    Type: AWS::EC2::SecurityGroup
  CorpNetworkSecurityGroupIngress0:
    Properties:
      CidrIp:
        Ref: CorpNetworkCidrParameter
      FromPort: '22'
      GroupId:
        Ref: CorpNetworkSecurityGroup
      IpProtocol: tcp
      ToPort: '22'
    Type: AWS::EC2::SecurityGroupIngress

  ForwardProxyRoute53RecordSet:
    Properties:
      HostedZoneName:
        Ref: Route53PrivateHostedZoneNameParameter
      Name:
        Fn::Sub: forward-proxy.${Route53PrivateHostedZoneNameParameter}
      ResourceRecords:
        - 'shinesolutions.com'
      TTL: 300
      Type: CNAME
    Type: AWS::Route53::RecordSet

  AdapttoConsolidatedRoute53RecordSet:
    Properties:
      HostedZoneName:
        Ref: Route53PublicHostedZoneNameParameter
      Name:
        Fn::Sub: adaptto-con.${Route53PublicHostedZoneNameParameter}
      ResourceRecords:
        - 'shinesolutions.com'
      TTL: 300
      Type: CNAME
    Type: AWS::Route53::RecordSet

  AdapttoAuthConsolidatedRoute53RecordSet:
    Properties:
      HostedZoneName:
        Ref: Route53PublicHostedZoneNameParameter
      Name:
        Fn::Sub: auth.adaptto-con.${Route53PublicHostedZoneNameParameter}
      ResourceRecords:
        - 'shinesolutions.com'
      TTL: 300
      Type: CNAME
    Type: AWS::Route53::RecordSet

  AdapttoPubConsolidatedRoute53RecordSet:
    Properties:
      HostedZoneName:
        Ref: Route53PublicHostedZoneNameParameter
      Name:
        Fn::Sub: pub.adaptto-con.${Route53PublicHostedZoneNameParameter}
      ResourceRecords:
        - 'shinesolutions.com'
      TTL: 300
      Type: CNAME
    Type: AWS::Route53::RecordSet

  AdapttoFullSetRoute53RecordSet:
    Properties:
      HostedZoneName:
        Ref: Route53PublicHostedZoneNameParameter
      Name:
        Fn::Sub: adaptto-fs.${Route53PublicHostedZoneNameParameter}
      ResourceRecords:
        - 'shinesolutions.com'
      TTL: 300
      Type: CNAME
    Type: AWS::Route53::RecordSet

  AdapttoAuthFullSetRoute53RecordSet:
    Properties:
      HostedZoneName:
        Ref: Route53PublicHostedZoneNameParameter
      Name:
        Fn::Sub: auth.adaptto-fs.${Route53PublicHostedZoneNameParameter}
      ResourceRecords:
        - 'shinesolutions.com'
      TTL: 300
      Type: CNAME
    Type: AWS::Route53::RecordSet
